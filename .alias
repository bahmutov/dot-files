# Easier navigation: .., ..., ~ and -
alias ..="cd .."
alias cd..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# programs

# link installed sublime to user local bin folder (once) to run it like `subl`
# sudo ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl
alias s="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias chrome-canary="/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary"
alias chromef="chrome --allow-file-access-from-files"

# hmm, how should VSCode be installed?
# https://code.visualstudio.com/docs/setup/mac
alias code='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'
# alias code="/Applications/Visual\ Studio\ Code.app/Contents/MacOS/Electron"

# Grunt shortcuts
alias gk="grunt karma"
alias gw="grunt watch --no-quiet --no-eslint"
alias wg="make gulp -j"

# Git shortcuts
alias g="git"
alias undopush="git push -f origin HEAD^:master"
alias gc="git clone"
alias st="git st"
alias gp="git pull"
alias gd="git checkout develop"
alias gdd="git checkout develop && git pull"
alias gmm="git checkout master && git pull"
alias gma="git checkout main && git pull"
# use to add an empty commit with a message like: gempty "test ci again"
alias gempty="git commit --allow-empty -m"
# git push without running pre-push hooks
alias gpno="git push --no-verify"
# git make a new branch quickly
alias gb="git checkout -b"

# a couple of extra git aliases take from
# https://news.ycombinator.com/item?id=8872334
# better logs
alias glog="git log --oneline --graph --all --decorate --pretty=format:'%h %cn %cr %C(Yellow)%d%Creset %s'"
alias logo="git log --oneline --graph --all --decorate"
alias logg="git log --graph --all --decorate"
# log just tagged commits
alias logt="git log --date-order --graph --tags --simplify-by-decoration --pretty=format:'%ai %h %C(Yellow)%d%Creset'"
# lists ignored files
alias ignored="git ls-files --others -i --exclude-standard"

# Typically I install and use additional git commands from
# https://github.com/tj/git-extras/blob/master/Commands.md
# for example there is "git clear-soft" that removes untracked files.

# phabricator / arcanist shortcuts
alias ab="arc branch"
alias al="time arc land"
# Use commit message verbatim and just add reviewers
alias ad="arc diff --verbatim --reviewers"

# Gitjk - git undo
# https://github.com/mapmeld/gitjk
alias gitjk="history 10 | tail -r | gitjk_cmd"

# global npm install
alias NPM="sudo npm install -g"

# running node with all ES6
alias harm="node --harmony"

# create new NPM module using Yeoman generator-node-bahmutov
alias new_module='yo node-bahmutov && yo node-bahmutov:release'

# File size
alias fs="stat -f \"%z bytes\""

# make new folder and cd in it right away
# requires using arguments
function md() {
  mkdir $1 && cd $1;
}

# computing SRI hashes
# https://glebbahmutov.com/blog/subresource-integrity/

# compute SHA256 has of a given downloaded file
function sha256() {
  sha=`curl -s $1 | openssl dgst -sha256 -binary | openssl base64 -A`
  echo -n sha256-$sha | pbcopy
  echo Copied SHA256 into your clipboard
  pbpaste
  echo
}

# compute SHA384 has of a given downloaded file
function sha384() {
  sha=`curl -s $1 | openssl dgst -sha384 -binary | openssl base64 -A`
  echo -n sha384-$sha | pbcopy
  echo Copied SHA384 into your clipboard
  pbpaste
  echo
}

# `cat` with beautiful colors. requires Pygments installed.
# sudo easy_install Pygments
# alias c='pygmentize -O style=monokai -f console256 -g'
# `cat` centered with syntax highlighting for JavaScript or Json
# npm install -g center-code
alias c='center'

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
	colorflag="--color"
else # OS X `ls`
	colorflag="-G"
fi

# List all files colorized in long format
alias l="ls -l ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -la ${colorflag}"

# list of files sorted by update date
# most recently updated files are shown last
alias last="ls -ltr"

# When using pre-git module with git-issues
# where "commit": "git-issues && commit-wizard"
alias nc="npm run commit"

# launch Cypress open using NPX
alias co="npx cypress open"
# Cypress run headlessly
alias cr="npx cypress run"

# list git branches with their descriptions

function branches() {
  branch=""
  branches=`git branch --list`

  # requires git > v.1.7.9

  # you can set branch's description using command
  # git branch --edit-description
  # this opens the configured text editor, enter message, save and exit
  # if one editor does not work (for example Sublime does not work for me)
  # try another one, like vi

  # you can see branch's description using
  # git config branch.<branch name>.description

  while read -r branch; do
    # git marks current branch with "* ", remove it
    clean_branch_name=${branch//\*\ /}
    description=`git config branch.$clean_branch_name.description`
    printf "%-15s %s\n" "$branch" "$description"
  done <<< "$branches"

  # example output
  # $ ./branches.sh
  # * master        this is master branch
  # one             this is simple branch for testing
}

alias es6-features="manpm lukehoban/es6features"
alias es6-docs="manpm bevacqua/es6"

# Docker aliases
alias dps='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.RunningFor}}"'
# Creates Node container with mapped current folder and runs Bash shell
alias node-box='docker run -v $PWD:/src -w /src -u node -it node /bin/bash'
# Creates full XVFB+Chrome container with mapped current folder
alias chrome-box='docker run -v $PWD:/src -w /src -u person -it cypress/browsers:chrome63 /bin/bash'
alias cy-0.19.4-box='docker run -v $PWD:/src -w /src -u person -it cypress/internal:cy-0.19.4 /bin/bash'
alias alpine-box='docker run -v $PWD:/src -w /src -it mhart/alpine-node:10 /bin/sh'
alias centos-box='docker run -v $PWD:/src -w /src -it cypress/base:centos7 /bin/sh'

# Quick random password
alias pass='node -e "process.stdout.write(crypto.randomBytes(32).toString(\"hex\"))" | pbcopy && echo "Random 32 bytes (hex) in your clipboard"'

# stringified JSON file in your clipboard
# better than just cat filename | pbcopy because removes newlines
function stringify() {
  filename=$1
  node -e "console.log(JSON.stringify(require(\"$filename\")))" | pbcopy
  echo "Copied stringified $filename to your clipboard"
}

# shrink the given PNG image using https://www.npmjs.com/package/pngquant-bin
function png() {
  filename=$1
  echo "Shrinking image $filename"
  original_size=`stat -f %z $filename`
  npx pngquant-bin --force "$filename" -o "$filename"
  new_size=`stat -f %z $filename`
  echo "$filename $original_size -> $new_size"
}

# copies the image file into the current folder
# shrinks it using PNG command
# and adds the shrunk file to Git repo
function gimage() {
  filename=$1
  cp $filename .
  name=$(basename -- "$filename")
  png $name
  git add $name
}

# Function: gready
# Description: This function is used to quickly stage, commit,
# and push changes to a Git repository.
# Parameters:
#   - message: The commit message to be used when committing the changes.
# Usage: gready "Commit message"
function gready() {
  message=$1
  git add -A && git commit -m "$message" && git push
}
